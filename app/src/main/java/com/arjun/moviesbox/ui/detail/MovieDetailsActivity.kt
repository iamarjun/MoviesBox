package com.arjun.moviesbox.ui.detailimport android.content.Contextimport android.content.Intentimport android.net.Uriimport android.os.Bundleimport android.view.Viewimport android.widget.ImageViewimport android.widget.TextViewimport android.widget.Toastimport androidx.activity.viewModelsimport androidx.appcompat.app.AppCompatActivityimport com.arjun.moviesbox.BuildConfigimport com.arjun.moviesbox.Rimport com.arjun.moviesbox.databinding.MovieDetailFragmentBindingimport com.arjun.moviesbox.model.Castimport com.arjun.moviesbox.model.Imageimport com.arjun.moviesbox.model.MovieDetailimport com.arjun.moviesbox.model.Videosimport com.arjun.moviesbox.util.*import com.arjun.moviesbox.util.LayoutManagerUtil.getHorizontalLayoutManagerimport com.bumptech.glide.Glideimport com.bumptech.glide.load.resource.drawable.DrawableTransitionOptionsimport com.bumptech.glide.request.RequestOptionsimport com.google.android.material.appbar.AppBarLayoutimport com.google.android.material.appbar.AppBarLayout.OnOffsetChangedListenerimport com.smarteist.autoimageslider.SliderAnimationsimport dagger.hilt.android.AndroidEntryPointimport timber.log.Timberimport java.util.*@AndroidEntryPointclass MovieDetailsActivity : AppCompatActivity() {    private val binding: MovieDetailFragmentBinding by viewBinding(MovieDetailFragmentBinding::inflate)    private val viewModel: MovieDetailViewModel by viewModels()    private val castAdapter: CastAdapter by lazy { CastAdapter() }    private lateinit var movie: MovieDetail    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(binding.root)        intent.getIntExtra(MOVIE_ID, -1).also {            viewModel.getMovieDetail(it)        }        setupToolbar()        setupRecyclerViews()        observeData()    }    override fun onSupportNavigateUp(): Boolean {        onBackPressed()        return true    }    private fun setupToolbar() {        supportActionBar?.setDisplayHomeAsUpEnabled(true)        supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_back_dark)        binding.appBar.addOnOffsetChangedListener(object : OnOffsetChangedListener {            var isShow = true            var scrollRange = -1            override fun onOffsetChanged(                appBarLayout: AppBarLayout,                verticalOffset: Int            ) {                if (scrollRange == -1) {                    scrollRange = appBarLayout.totalScrollRange                }                if (scrollRange + verticalOffset == 0) {                    isShow = true                } else if (isShow) {                    binding.collapsingToolbar.title = " "                    isShow = false                }            }        })    }    private fun setupRecyclerViews() {        binding.castRv.layoutManager = getHorizontalLayoutManager(this)        binding.castRv.adapter = castAdapter    }    private fun observeData() {        viewModel.movieDetail.observe(this) {            when (it) {                is Resource.Loading -> showLoading(true)                is Resource.Success -> {                    it.data.also { movie ->                        setMovieDetails(movie)                        setBackdropsSlider(movie.images.backdrops)                        setMovieVideos(movie.videos)                        setCastList(movie.credits.cast)                        showLoading(false)                    }                }                is Resource.Error -> {                    Timber.e(it.exception)                    Toast.makeText(this, it.exception.localizedMessage, Toast.LENGTH_SHORT).show()                    showLoading(false)                }            }        }    }    private fun setMovieDetails(movie: MovieDetail) {        this.movie = movie        supportActionBar?.title = movie.title        binding.movieDetailsTitle.text = movie.title        binding.movieDetailsOverview.text = movie.overview        binding.ratingText.text = movie.voteAverage.toString()        binding.ratingCount.text = String.format(            Locale.US,            "%,d reviews",            movie.voteCount        )        binding.movieDetailsDuration.text = movie.runtime.getRuntime()        binding.movieDetailsGenres.text = getGenres(movie.genres)        binding.movieDetailsReleaseDate.text = movie.releaseDate.getReleaseDate()        Glide.with(this)            .load(BuildConfig.TMDB_IMAGE_342 + movie.posterPath)            .error(R.drawable.ic_undraw_404)            .apply(RequestOptions.placeholderOf(R.drawable.ic_undraw_images).centerCrop())            .transition(DrawableTransitionOptions.withCrossFade())            .into(binding.movieDetailsPoster)    }    private fun setBackdropsSlider(imageItems: List<Image>?) {        imageItems?.let {            binding.imageSlider.sliderAdapter = BackdropSlideAdapter(imageItems)            binding.imageSlider.setSliderTransformAnimation(SliderAnimations.FADETRANSFORMATION)            binding.imageSlider.setIndicatorVisibility(false)        }    }    private fun setMovieVideos(videosResponse: Videos?) {        binding.movieTrailers.removeAllViews()        if (videosResponse != null) {            if (videosResponse.results.isEmpty()) {                binding.trailersLabel.visibility = View.GONE                binding.movieTrailers.visibility = View.GONE            } else {                for ((key, name) in videosResponse.results) {                    val parent = layoutInflater.inflate(                        R.layout.item_trailer,                        binding.movieTrailers,                        false                    )                    val thumbnailTrailer =                        parent.findViewById<ImageView>(R.id.thumbnail_trailer)                    val movieTrailerTitle =                        parent.findViewById<TextView>(R.id.trailerTitle)                    movieTrailerTitle.text = name                    Glide.with(this)                        .load(String.format(BuildConfig.YOUTUBE_THUMBNAIL_URL, key))                        .apply(RequestOptions.placeholderOf(R.color.teal_700).centerCrop())                        .into(thumbnailTrailer)                    thumbnailTrailer.requestLayout()                    thumbnailTrailer.setOnClickListener {                        startActivity(                            Intent(                                Intent.ACTION_VIEW,                                Uri.parse(String.format(BuildConfig.YOUTUBE_VIDEO_URL, key))                            )                        )                    }                    binding.movieTrailers.addView(parent)                }            }        } else {            showError()            binding.trailersLabel.visibility = View.GONE            binding.movieTrailers.visibility = View.GONE        }    }    private fun setCastList(castList: List<Cast>?) {        if (castList?.isNotEmpty()!!) {            castAdapter.submitList(castList)        } else {            binding.castLabel.visibility = View.GONE            binding.castRv.visibility = View.GONE        }    }    private fun showLoading(state: Boolean) {        if (state) {            binding.backgroundLoading.visibility = View.VISIBLE            binding.progressBar.visibility = View.VISIBLE            binding.appBar.visibility = View.GONE            binding.constraint.visibility = View.GONE        } else {            binding.backgroundLoading.visibility = View.GONE            binding.progressBar.visibility = View.GONE            binding.appBar.visibility = View.VISIBLE            binding.constraint.visibility = View.VISIBLE        }    }    private fun showError() {        Toast.makeText(this, "Check your internet connection.", Toast.LENGTH_SHORT).show()    }    companion object {        private const val MOVIE_ID = "MOVIE_ID"        fun getIntent(context: Context, movieId: Int): Intent =            Intent(context, MovieDetailsActivity::class.java).also {                it.putExtra(MOVIE_ID, movieId)            }    }}